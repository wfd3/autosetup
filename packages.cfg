# This is an example of a package configuration file.  It prepares the system
# for installation, installs a set of APT packages, and then does some
# post-install configuration.
#

__PREP_SYSTEM__:
# Prep the system before installing packages. 
# Turn off apt phasing, and run 'apt update' and 'apt upgrade' 
# before installing anything else.  The 'virtual' flag tells the system not to run apt install for this package.
  flags: virtual
  script: \
    # Turn off apt pacing \
    echo "Disable APT phasing" \
    rm -f /etc/apt/apt.conf.d/99-phased-updates \
    echo "# Disable phased/rolling updates" >> /etc/apt/apt.conf.d/99-phased-updates \
    echo "Update-Manager::Always-Include-Phased-Updates true;" >> /etc/apt/apt.conf.d/99-phased-updates \
    echo "APT::Get::Always-Include-Phased-Updates true;" >> /etc/apt/apt.conf.d/99-phased-updates \
  postscript: \
    # Run apt update  and apt upgrade \
    echo "Running apt update"\
    apt update \
    echo "Running apt upgrade" \
    apt -y upgrade

#
# Install these APT packages, in the order they appear here.
#

apt-transport-https
gpg
ansible
wget
rsync
apt-file
net-tools
ncal

# Package with hosts examples
git:
  hosts: myhost             # Install on the machine `myhost`

tree:
  hosts: *.foo.com          # Install on any machine in the foo.com domain

atop:
  hosts: !myhost            # Install on any machine *except* `myhost`

curl:
  hosts: !*.foo.com         # Install on any machine *except* those in the foo.com domain

rsync:
  hosts: myhost, !*.foo.com # Install on myhost but not on any machine in foo.com

# APT packages with pre- or postscripts
tcsh:
  # 'postscript' tells the system to run this script after apt install has installed the package
  postscript: \
    echo "Updating /etc/shells to include tcsh" \
    echo "/bin/tcsh" >> /etc/shells

# Autofs/NFS
autofs:
  flags: script_run_once      # Only run scripts once
  postscript: \
    # Add /m to auto.master \
    echo "#" >> /etc/auto.master \
    echo "# Add mount point for the NAS" >> /etc/auto.master \
    echo "/nas            /etc/auto.nas" >> /etc/auto.master \
    # add entries to auto.nas \
    rm -f /etc/auto.nas \
    echo "slow    -soft,intr,resvport,rw  nas:/mnt/nas" >> /etc/auto.nas \
    # restart autofs \
    systemctl restart autofs.service

# SSHD
openssh-server:
  postscript: \
    # Enable and start sshd \
    systemctl enable ssh \
    systemctl start ssh

# Install packages from non-standard sources

# Download and install the VSCode .deb 
code: 
  deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64

# Add the repository and key for Google Chrome, then use apt to install it.
google-chrome-stable:
  # 'prescript' tells the system to run this script before apt install installs the package
  prescript: wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - 
  source: google-chrome.list deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main

# Add the PPA for Kicad, then use APT to install it
kicad:
  repo: ppa:kicad/kicad-8.0-releases

# Download the key for Spotify and add it to gpg, then add the repository to
# /etc/apt/sources.list.d/spotify.list, and install the package via APT
spotify-client: 
  prescript: wget -q -O - https://download.spotify.com/debian/pubkey_C85668DF69375001.gpg | gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg
  source: spotify.list deb http://repository.spotify.com stable non-free



__SYSTEM_SETUP_POST_INSTALL__:
# After everything else is installed, do some system setup.  Specifically:
# - Remove Ubuntu help hints
# - Remove unneeded packages
  flags: virtual
  script: \
    # Remove Ubuntu adverts \
    echo "Removing Ubuntu help hints" \
    rm /etc/update-motd.d/10-help-text \
    # Update Grub \
    eco "Updating Grub" \
    update-grub \
    # Run apt autoremove \ 
    echo "Remove unneeded packages" \
    apt -y autoremove

