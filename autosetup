#!/usr/bin/env python3

# -*- coding: python -*-

import argparse
import os
import subprocess
import sys
import tempfile
import urllib.request
import socket
import itertools
import re
from functools import lru_cache
from enum import Enum, auto
from pathlib import Path
from dataclasses import dataclass, field
from typing import List, Callable, ClassVar, Dict, Iterable, Iterator, Set, TextIO, Tuple, Optional


# ----------------------------------------------------------------------------
# Constants and Configuration
# ----------------------------------------------------------------------------

VERSION = "1.2"

temp_dir: Optional[tempfile.TemporaryDirectory] = None
APT_SOURCES_DIR: str = "/etc/apt/sources.list.d"

def hostname_matches(hosts: Set[str]) -> bool:
        """
        Check if current hostname matches any pattern in the given set.
        Patterns can be:
        - Direct hostname matches (web, web.example.com)
        - Domain wildcards (*.example.com)
        - Exclusions with ! prefix (!web, !*.example.com)
        
        Args:
            hostname_patterns (set): Set of hostname patterns to check
            
        Returns:
            bool: True if hostname matches any positive pattern and no exclusions
        """
        current: str = socket.getfqdn()
        
        # Split patterns into inclusions and exclusions
        exclusions: Set[str] = {p[1:] for p in hosts if p.startswith('!')}
        inclusions: Set[str] = {p for p in hosts if not p.startswith('!')}
        
        def matches_pattern(hostname: str, pattern: str) -> bool:
            if pattern.startswith('*.'):
                # Domain wildcard match
                domain: str = pattern[2:]  # Remove *. prefix
                return hostname.endswith(domain)
            else:
                # Direct or partial hostname match
                return pattern in hostname or hostname.startswith(f"{pattern}.")
        
        # Check exclusions first
        for pattern in exclusions:
            if matches_pattern(current, pattern):
                return False
                
        # If no inclusions specified, any non-excluded host matches
        if not inclusions:
            return True
            
        # Check inclusions
        for pattern in inclusions:
            if matches_pattern(current, pattern):
                return True
                
        return False
# ----------------------------------------------------------------------------
# Data classes
# ----------------------------------------------------------------------------

# PackageDatabase: Installed package database
@dataclass
class PackageDatabase:
    """Class to manage the installed package database."""

    installed_packages: Set[str] = field(default_factory=set)

    def __iter__(self):
        return iter(self.installed_packages)

    def load(self) -> None:
        """Load the list of installed packages."""

        try:
            result = subprocess.run(
                ['apt-mark', 'showmanual'],
                capture_output=True, text=True, check=True
            )
            self.installed_packages = {
                line.split(':', 1)[0]
                for line in (l.strip() for l in result.stdout.splitlines())
                if line and not line.startswith('#')
            }
        except subprocess.CalledProcessError:
            bail("Error getting list of installed packages")

    def load_old(self) -> None:
        """Load the list of installed packages."""

        try:
            result = subprocess.run(
                ['apt', 'list', '--installed'],
                capture_output=True, text=True, check=True
            )
            self.installed_packages = {
                p.split('/')[0] 
                for p in result.stdout.splitlines()[1:] 
                if '/' in p
            }
        except subprocess.CalledProcessError:
            bail("Error getting list of installed packages")

    def is_installed(self, package: str) -> bool:
        """Check if a package is actually installed (regardless of manual/auto status)."""
        try:
            result = subprocess.run(
                ['dpkg-query', '-W', '-f=${Status}', package],
                capture_output=True, text=True
            )
            return "install ok installed" in result.stdout
        except subprocess.CalledProcessError:
            return False

# Package: Package description class
class InstallMethod(Enum):
    APT = auto()
    DEB = auto()

@dataclass
class Package:

    # TODO: All of these constants, string, and flags needs to be reworked.  

    class ScriptPhase(Enum):
        # Script phases
        preinstall = 'prescript'
        postinstall = 'postscript'
    
    # Class-level flag constants
    class Flags(Enum):
        force = 'force'
        skip = 'skip'
        virtual = 'virtual'
        run_once = 'run_once'
        prescript_run_once = 'prescript_run_once'
        postscript_run_once = 'postscript_run_once'
        pre_and_post_run_once = 'script_run_once'
    
    # Package directives:
    class Directives(Enum):
        hosts = 'hosts'
        flags = 'flags'
        deb = 'deb'
        repo = 'repo'
        source = 'source'
        apt = 'apt'
    
    # Initialize known flags from constants
    _known_flags: Set[str] = field(
        default_factory=lambda: {
            Package.Flags.force, Package.Flags.skip, Package.Flags.virtual,
            Package.Flags.run_once, Package.Flags.prescript_run_once,
            Package.Flags.postscript_run_once, Package.Flags.pre_and_post_run_once
        }
    )   
    
    SCRIPT_ONCE_FLAGS: ClassVar[Dict[ScriptPhase, str]] = {
        ScriptPhase.preinstall:  Flags.prescript_run_once,
        ScriptPhase.postinstall: Flags.postscript_run_once
    }

    name:              str = None
    install_method:    InstallMethod = InstallMethod.APT
    url:               Optional[str] = None    # for deb downloads
    repositories:      Set[str] = field(default_factory=set)
    sources:           List[tuple[int, str]] = field(default_factory=list)  # [(filename, content),...]
    scripts:           Dict[ScriptPhase, str] = field(default_factory=dict)
    flags:             Set[Flags] = field(default_factory=set)
    hosts:             Set[str] = field(default_factory=set)
    downloaded_file:   Optional[str] = None
    apt_package:       str = None
    _force_apt_update: bool = False
    _SEMAPHORE_DIR:    Path = Path("/var/run/autosetup")

    def __str__(self) -> str:
        return self.name
    
    def show(self) -> str:
        """Return a human-readable string representation of the package."""
        pre = self.pretty_script(self.ScriptPhase.preinstall)
        post = self.pretty_script(self.ScriptPhase.postinstall)
        if pre: 
            pre = "\n" + pre
        else: 
            pre = ""
        if post:
            post = "\n" + post
        else:
            post = ""
        
        return (
                f"{self.name}:\n"
                f"  URL: {self.url or 'N/A'}\n"
                f"  Repositories: {', '.join(self.repositories) if self.repositories else 'None'}\n"
                f"  Sources: {', '.join(f'{fname}: {content}' for fname, content in self.sources) if self.sources else 'None'}\n"
                f"  Pre-install: {pre}\n"
                f"  Post-install: {post}\n"
                f"  Flags: {', '.join(flag.name for flag in self.flags) if self.flags else 'None'}\n"
                f"  Hosts: {', '.join(self.hosts) if self.hosts else 'None'}\n"
                f"  Downloaded File: {self.downloaded_file or 'None'}\n"
                f"  APT Package: {self.apt_package or 'None'}\n")
    
    def needs_apt_update(self) -> bool:
        return self._force_apt_update
    
    def update_apt_database(self) -> bool:
        """ Force update apt package database """
    
        if args.dryrun:
            return

        info("Updating package database")
        try:
            subprocess.run(['apt', 'update'], **run_opts, check=True)
            success("Package database updated")
            return True
        except subprocess.CalledProcessError:
            error("Error updating package database")
            return False
        
    def parse_flags(self, input: str) -> Set[Flags]:
        """Parse a comma-separated list of flags into a set."""
        strings = set(f.strip().lower() for f in input.split(','))
        flags = set()
        valid_values = {flag.value for flag in self.Flags}

        for s in strings:
            if s not in valid_values:
                raise ValueError(f"Invalid flag: {s}")
            for flag in self.Flags:
                if flag.value == s:
                    flags.add(flag)
                    break
        return flags

    def flags_exists(self, flags: Set[Flags]) -> Optional[str]:
        """Check if all proposed flags are valid and do not duplicate any already set flags. 
           Return error message if not."""
    
        unknown_flags = flags - self._known_flags
    
        if unknown_flags:
            return f"Unknown flag(s) {', '.join(unknown_flags)}"
    
        duplicate_flags = flags & self.flags
        if duplicate_flags:
            return f"Duplicate flag(s) {', '.join(duplicate_flags)}"

        return None
    
    def has_flags(self, *flags: str) -> bool:
        """Check if the package has any of the given flags."""
        return bool(self.flags & set(flags))
    
    def run_once(self, phase: ScriptPhase) -> bool:
        """Check if the script should only be run once."""
        return self.has_flags(self.SCRIPT_ONCE_FLAGS[phase]) or self.has_flags(self.Flags.pre_and_post_run_once)
    
    def hostname_matches(self) -> bool:
        """Check if the current hostname matches the package's host patterns."""
        if not self.hosts:
            return True
        return hostname_matches(self.hosts)
    
    def hosts_exists(self, hosts: Set[str]) -> Optional[str]:
        for host in hosts:
            if host in self.hosts:
                return f"Duplicate hostname '{host}'"
        return None
    
    def add_hosts(self, hosts: Set[str]) -> None:
        """Add hosts to the package."""
        self.hosts.update(hosts)
    
    def add_scripts(self, phase: ScriptPhase, script: str) -> Optional[str]:
        """Add a script to the package."""
        if phase in self.scripts:
            p = phase.value[0].upper() + phase.value[1:]
            return f"{p} already defined"
        self.scripts[phase] = script
        return None

    def get_script(self, phase: ScriptPhase) -> Optional[str]:
        """Get the script for the given phase."""
        return self.scripts.get(phase, None)

    def skip(self, installed_packages: 'PackageDatabase') -> Tuple[bool, Optional[str]]:
        """ Return True if this package should be skipped """

        if self.has_flags(Package.Flags.force) or args.force_all:
            return False, "forcing package"

        if installed_packages.is_installed(self.name):
            return True, "already installed"

        if self.has_flags(Package.Flags.skip):
            return True, "package has skip flag"
        
        if args.skip and self.name in args.skip:
            return True, "--skip flag"
        
        if args.skip_flags and self.flags & args.skip_flags:
            return True, "--skip-flags flag"
        
        if args.only and self.name not in args.only:
            return True, "--only flag"
        
        if args.only_flags and not self.flags & args.only_flags:
            return True, "--only-flags flag"
        
        if not self.hostname_matches():
            return True, "hostname"
        
        return False, "Not skipping"

    def pretty_script(self, script: ScriptPhase) -> Optional[str]:
        """Format script commands for display."""

        s = self.get_script(script)
        if s is None:
            return s
        return f"    " + s  # TODO: this needs to be improved
    
    def pretty_print_script(self, script: ScriptPhase) -> None:
        print(f"{self.pretty_script(script)}")
    
    # Semaphore functions
    def _semaphore_name(self, phase: ScriptPhase) -> str:
        """Return the semaphore filename for a package and script phase."""
   
        return self._SEMAPHORE_DIR / f"{self.name}.{self.SCRIPT_ONCE_FLAGS[phase]}"

    def semaphore_create(self, phase: ScriptPhase) -> None:
        """Create an semaphore file for this package, for the script phase."""
    
        if args.dryrun:
            return
        
        path = self._semaphore_name(phase)
        path.parent.mkdir(parents=True, exist_ok=True)  # Create all parent directories
        try:
            path.touch()
        except OSError as e:
            bail(f"Could not create semaphore file {path}: {e}")

    def semaphore_exists(self, phase: ScriptPhase) -> bool:
        """Check if a semaphore exists for this package and script phase."""
        return self._semaphore_name(phase).is_file()
    
    # Installation functions

    def run_script(self, phase: ScriptPhase) -> Tuple[bool, Optional[str]]:
        """Run a script for this package and phase."""

        script = self.get_script(phase)

        if not script:
            return True, None

        run_once = self.run_once(phase)

        if run_once and self.semaphore_exists(phase):
            debug(f"Skipping {self.name} {phase.value}, already run")
            return True, None

        if args.dryrun:
            if args.debug:
                self.pretty_print_script(phase)
            return True, None
            
        debug(f"Running {self.name} {phase.value}")
        if args.debug or args.verbose:
            self.pretty_print_script(phase)
        
        try:
            subprocess.run(script, **run_opts, shell=True, check=True)
            if run_once:
                self.semaphore_create(phase)
            return True, None
        except subprocess.CalledProcessError as result:
            if args.debug:
                self.pretty_print_script(phase)
            return False, f"Error running {self.name} {phase.value}: return code {result.returncode}"
            
    def get_name_from_deb_package(self, package: Path) -> str:
        """Extract the package name from a deb package file."""
        try:
            result = subprocess.run(['dpkg-deb', '-f', package, "Package"], 
                                    capture_output=True, text=True, check=True)
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            bail(f"Error extracting package name from {package}")

    def is_deb_package_installed(self, package_name: str) -> bool:
        """ Check if a package is installed using dpkg-query.
            Returns True if the package is installed, False otherwise.
        """
        try:
            cmd: List[str] = ["dpkg-query", "-W", "-f=${Status}", package_name]
            result: subprocess.CompletedProcess = subprocess.run(cmd, capture_output=True, text=True)
            return "install ok installed" in result.stdout
        except subprocess.CalledProcessError:
            return False
    
    def install_deb(self) -> Tuple[bool, Optional[str]]:
        """Install a package from a deb file."""
        
        if self.is_deb_package_installed(self.name) and not self.has_flags(Package.Flags.force):
            debug(f"Package {self.name} already installed, skipping")
            return True, None

        if args.dryrun:
            return True, None
        
        if not self.downloaded_file:
            bail(f"No downloaded file for package {self.name}")
            
        package_name = self.get_name_from_deb_package(self.downloaded_file)

        if self.is_deb_package_installed(package_name) and not self.has_flags(Package.Flags.force):
            debug(f"Downloaded package {self.name} already installed, skipping")
            return True, None

        if args.dryrun:
            return True, None

        try:
            subprocess.run(['dpkg', '-i', self.downloaded_file], **run_opts, check=True)
            return True, None
        except subprocess.CalledProcessError:
            return False, f"Error installing package {self.name} from {self.downloaded_file}"

    def install_apt(self, installed_packages: 'PackageDatabase') -> Tuple[bool, Optional[str]]:
        """Install a package via apt."""
        
        if not self.apt_package:
           bail("No APT package name specified")
           return True, None
         
        if self.has_flags(Package.Flags.virtual):
            debug(f"Skipping package {self.name}")
            return True, None
        
        if installed_packages.is_installed(self.name) and not self.has_flags(Package.Flags.force): 
            debug(f"APT package {self.name} already installed, skipping")
            return True, None
        
        if args.dryrun:
            return True, None

        try:
            # use:
            #  - reinstall to ensure package is installed even if it is already installed
            #  - set DEBIAN_FRONTEND=noninteractive to force default install options
            #   
            # The 'is_installed() and not force' check above will prevent installed packages that should
            # not be reinstalled from being reinstalled.
            env = os.environ.copy()
            env["DEBIAN_FRONTEND"] = "noninteractive"
            subprocess.run(['apt', 'reinstall', '-y', self.apt_package], **run_opts, env=env, check=True)
            return True, None
        except subprocess.CalledProcessError:
            return False, f"Error installing package {self.apt_package}"
    
    def install_package(self, installed_packages: 'PackageDatabase') -> Tuple[bool, Optional[str]]:
        match self.install_method:
            case InstallMethod.DEB:
                return self.install_deb()
            case InstallMethod.APT:
                return self.install_apt(installed_packages)
            case _:
                return False, f"Unknown install method for package {self.name}"
    
    def add_repositories(self) -> Tuple[bool, Optional[str]]:
        """Add repositories for the package."""
        
        for repo in self.repositories:
            if args.dryrun:
                continue

            try:
                debug(f"Adding repository: {repo}")
                subprocess.run(['add-apt-repository', '-y', '-n', repo], **run_opts, check=True)
                self._force_apt_update = True
            except subprocess.CalledProcessError:
                return False, f"Error adding repository: {repo}"
        
        return True, None

    def add_sources(self) -> Tuple[bool, Optional[str]]:
        """Add sources for the package by creating files in /etc/apt/sources.list.d/."""
       
        for filename, content in self.sources:
            if args.dryrun:
                continue

            try:
                if not Path(filename).is_file():
                    debug(f"Adding source file: {filename}")
                    with open(filename, 'w') as sources_file:
                        sources_file.write(f"# Added by autosetup for package {self.name}\n")
                        sources_file.write(f"{content}\n")
                    self._force_apt_update = True
                else:
                    warning(f"'{filename}' exists, skipping")
            except Exception as e:
               return False, f"Error adding source to {filename}: {e}"
            
        return True, None

    def download_package(self, installed_packages: 'PackageDatabase') -> Tuple[bool, Optional[str]]:
        
        if not self.url:
            debug(f"No URL for package {self.name}")
            return True, None
            
        if installed_packages.is_installed(self.name) and not self.has_flags(Package.Flags.force):
            debug("Not downloading package, already installed")
            return True, None

        self.downloaded_file = self.name + ".deb"

        if args.dryrun:
            return True, None

        try:
            if args.debug:
                info(f"Downloading {self.url}")
                info(f"    to file {self.downloaded_file}")
            opener = urllib.request.build_opener(urllib.request.HTTPRedirectHandler())
            urllib.request.install_opener(opener)           
            urllib.request.urlretrieve(self.url, self.downloaded_file)
        
            if not Path(self.downloaded_file).is_file():
                return False, f"Downloaded file {self.downloaded_file} not found"
            
            return True, None
        except Exception as e:
            return False, f"Error downloading from URL {self.url}: {e}"

    def install(self, installed_packages: 'PackageDatabase') -> bool:
        """Install the package."""

        notice(f"{self.name+': ':<32}", end='')

        skip, reason = self.skip(installed_packages)
        if skip:
            commentary(f"skipped, {reason}")
            return True

        # Order of operation:
        #   repos, sources, preinstall script, download, install, postinstall script
        try:
            notice("Repo ", end='')
            ok, err = self.add_repositories()
            if not ok:
                raise RuntimeError(err)

            notice("Sources ", end='')
            ok, err = self.add_sources()
            if not ok:
                raise RuntimeError(err)

            if self.needs_apt_update():
                notice("apt-update ", end='')
                if not self.update_apt_database():
                    raise RuntimeError("apt update failed")

            notice(f"Pre ", end='')
            ok, err = self.run_script(self.ScriptPhase.preinstall)
            if not ok:
                raise RuntimeError(err)

            notice("DLoad ", end='')
            ok, err = self.download_package(installed_packages)
            if not ok:
                raise RuntimeError(err)

            notice("PkgIns ", end='')
            ok, err = self.install_package(installed_packages)
            if not ok:
                raise RuntimeError(err)

            notice("Post ", end='')
            ok, err = self.run_script(self.ScriptPhase.postinstall)
            if not ok:
                raise RuntimeError(err)

            success("DONE")
            return True

        except RuntimeError as e:
            cprint(f"\n{self.name+':'} {e}", Colors.ERROR, stream=sys.stderr)
            return False
            

# PackageList: List of PackageAttributes parse from the packagelist file
@dataclass
class PackageList:
    
    # TODO: Make the packagelist tokens constants in this class

    _packages: List[Tuple[int, Package]] = field(default_factory=list)  # Line number, package

    def __init__(self, filename: Path = None, _packages: List[Tuple[int, Package]] = None):
        if filename:
            self.load(filename)
        elif _packages:
            self._packages = _packages

    # Hide the line number when iterating
    def __iter__(self):
        return (package for _, package in self._packages)
         
    def __bool__(self) -> bool:
        return bool(self._packages)
    
    def __len__(self) -> int:
        """Return the number of packages in the list."""
        return len(self._packages)
    
    def append(self, line_num: int, pkg: Package) -> bool:
        """Append a package to the list. Return True if errors found."""
        ret = False

        existing = next((p for p in self._packages if p[1].name == pkg.name), None)
        if existing:
            existing_line_num, _ = existing
            warning(f"Duplicate package `{pkg.name}` at line {line_num},")
            warning(f" {pkg.name} first seen at line {existing_line_num}")
            ret = True
        
        self._packages.append((line_num, pkg))
        return ret
    
    def show(self) -> None:
        pkgs = ""
        for _, pkg in self._packages:
            pkgs += f"{pkg.name}, "

        pkgs = pkgs.rstrip(', ')
        cprint(f"{len(packageEntries)} packages in '{args.filename}'", Colors.CYAN)
        cprint(f"Package list:", Colors.CYAN)
        cprint(f"{pkgs}", Colors.WHITE)
    
    def list(self)-> None:
        for _, pkg in self._packages:
            print(pkg.show())      
        
    #-------------------------------------------------
    # Package List Parsing
   
    def _filter_comments(self, line: str) -> Optional[str]:
        """Remove comments but preserve # characters in quoted strings."""

        if not line:
            return None
        
        result = []    
        in_quote = False
        quote_char = None
        i = 0
        
        while i < len(line):
            char = line[i]
            
            # Handle quotes
            if char in '"\'':
                if not in_quote:
                    in_quote = True
                    quote_char = char
                elif char == quote_char:
                    in_quote = False
                    quote_char = None
                    
            # Handle comment outside of quotes
            elif char == '#' and not in_quote:
                break
                
            result.append(char)
            i += 1
        
        filtered = ''.join(result).rstrip()
        return filtered if filtered else None
    
    def _parse_directive(self, line: str, pkg: Package) -> Optional[str]:
        """Parse a single directive line and update package attributes."""

        try:
            directive, content = line.split(':', 1)
        except ValueError:
            return "Malformed directive"

        directive = directive.strip().lower()
        content = content.strip()
        
        match directive:
            case Package.Directives.hosts.value:
                hosts = set(f.strip().lower() for f in content.split(','))
                err = pkg.hosts_exists(hosts)
                if err is not None:
                    return err
                pkg.add_hosts(hosts)

            case Package.Directives.flags.value: 
                try:
                    flags = pkg.parse_flags(content)
                except ValueError as e:
                    return str(e)
                err = pkg.flags_exists(flags)
                if err is not None:
                    return err
               
                would_have_force = Package.Flags.force.value in flags or Package.Flags.force.value in pkg.flags
                would_have_skip = Package.Flags.skip.value in flags or Package.Flags.skip.value in pkg.flags
    
                if would_have_force and would_have_skip:
                    return f"Package cannot have both 'force' and 'skip' flags"
        
                pkg.flags.update(flags)
            
            case Package.Directives.deb.value:
                if pkg.url:
                    return f"Duplicate 'deb' directive for package"
                pkg.install_method = InstallMethod.DEB
                pkg.url = content
            
            case Package.Directives.repo.value:
                if pkg.sources:
                    return f"Cannot have both 'repo' and 'source' directives"
                pkg.repositories.add(content)
            
            case Package.Directives.source.value:
                if pkg.repositories:
                    return f"Cannot have both 'repo' and 'source' directives"
                
                try:
                    fname, src = content.split(None, 1)
                    fname = str(Path(APT_SOURCES_DIR).joinpath(Path(fname).name))
                    pkg.sources.append((fname, src))
                except ValueError:
                    return f"Invalid source format: {content}"
            
            case Package.ScriptPhase.preinstall.value:
                return pkg.add_scripts(Package.ScriptPhase.preinstall, content)
            
            case Package.ScriptPhase.postinstall.value:
                return pkg.add_scripts(Package.ScriptPhase.postinstall, content)
            
            case Package.Directives.apt.value:
                if pkg.apt_package:
                    return f"Duplicate 'apt' directive for package"
                pkg.apt_package = content
            
            case _:
                return f"Unknown directive: {directive}"
        return None

#############################################################################################################
    def _cond(self, var: str, val: str) -> bool:
        if var == "host":
            return hostname_matches({val})  # Convert string to set
        
        return False  # unknown variables default to false (or raise)

    def parse_if(self, line: str) -> Tuple[bool, Optional[str], Optional[str]]:
        line = line.strip()
        if not line.startswith("@if "):
            return False, None, None
        body = line[4:].strip()
        if "=" not in body:
            return False, None, None
        var, val = body.split("=", 1)
        var, val = var.strip(), val.strip()
        if not var or not val:
            return False, None, None
        return True, var, val

    def preprocess_if_blocks(self, lines: Iterable[str], cond: Callable[[str, str], bool]) -> Iterator[Tuple[int, str]]:
        """
        Yields (orig_lineno, line) only for lines inside active #if blocks.
        - Recognizes: '#if <var>=<val>' and '#endif'
        - Supports nesting
        - Drops the directive lines themselves from output
        """
        stack: list[bool] = []  # each level indicates whether that block is active

        for lineno, raw in enumerate(lines, 1):
            # Handle comments and empty lines
            stripped = self._filter_comments(raw.rstrip())
            if not stripped:
                continue

            if stripped.startswith("@if "):
                ok, var, val = self.parse_if(stripped)
                if not ok:
                    raise ValueError(f"Invalid @if at line {lineno}: {raw.rstrip()}")
                parent_active = stack[-1] if stack else True
                this_active = parent_active and bool(cond(var, val))
                stack.append(this_active)
                continue  # do not emit the directive line

            if stripped == "@endif":
                if not stack:
                    raise ValueError(f"Unmatched #endif at line {lineno}")
                stack.pop()
                continue  # do not emit the directive line

            # Emit only if all enclosing conditions are active
            if not stack or stack[-1]:
                yield lineno, stripped

        if stack:
            raise ValueError("Unclosed #if block at end of file")

    def load(self, filename: Path) -> None:
        """Parse package list file into list of Package."""
        self._packages = []
        current_pkg = None
        expect_directives = False
        err: Optional[str] = None
    
        # Read and process file
        if not filename.is_file():
            bail(f"Package file '{filename}' does not exist or is not readable.")

        try:
            with open(filename, "r", encoding="utf-8") as f:
                continued = ''

                for line_num, line in self.preprocess_if_blocks(f, self._cond):
                    # Handle line continuation
                    if line.rstrip().endswith('\\'):
                        continued += line.rstrip()[:-1] + '\n'
                        continue
                    
                    if continued:
                        line = continued + line
                        continued = ''

                    line = line.rstrip('\n')
                    if not line:
                        continue 

                    err = None

                    # Is this line a package name?
                    if line.endswith(':') or not ':' in line:
                        name = line.rstrip(':')

                        if expect_directives:  # Expected directives, have a pkg or incomplete directive
                            err = f"Expecting directives for package '{current_pkg}', found "
                            if line.endswith(':'):
                                err += f"incomplete directive '{line.lstrip()}' "
                            else:
                                err += f"package '{name}' "
                            err += f"at line {line_num}"
                            bail(err)

                        if line.endswith(':'): 
                            expect_directives = True

                        current_pkg = Package(name=name, apt_package=name)
                        self.append(line_num, current_pkg)
                        continue

                    # Is this line a directive?
                    if line.startswith(' ') and (':' in line and not line.endswith(':')):
                        if not current_pkg:
                            bail(f"Directive without package name at line {line_num}")
                        err = self._parse_directive(line.strip(), current_pkg)
                        if err is not None:
                            bail(f"Invalid directive syntax at line {line_num}: {err} in package '{current_pkg}'")
                        expect_directives = False
                        continue

                    # Error cases
                    if ':' in line and not line.endswith(':') and not line.startswith(' '):
                        bail(f"Missing required whitespace before directive at line {line_num}")

                    # Whatever we have in line is an error.  
                    bail(f"Unknown syntax at line {line_num}: {line}")
        except OSError as e:
            bail(f"Error reading {filename}: {e}")

        # Check if the last package had directives
        if expect_directives:
            bail(f"Expecting directives for package '{current_pkg}', instead found end-of-file at line {line_num}")

        return None

    #-------------------------------------------------

    def install(self, installed_packages: 'PackageDatabase') -> None:
        success("Starting package installation")
        errors = []
        for line_num, pkg in self._packages:
            if not pkg.install(installed_packages):
                if args.stop_on_errors:
                    bail(f"Stopping installation due to errors in package '{pkg.name}' at line {line_num}")
                
                errors.append(pkg.name)

        if len(errors) > 0:
            cprint(f"Installation completed with {len(errors)} errors in packages:", Colors.ERROR)
            cprint(f'{", ".join(errors)}', Colors.WHITE)
        else:
            success("Installation complete")
        
# ----------------------------------------------------------------------------
# Output Functions
# ----------------------------------------------------------------------------
# ANSI color codes for output
class Colors(Enum):
    """ANSI color codes for terminal output."""
    BLUE =    '\033[0;94m' # Blue
    GREEN =   '\033[0;92m' # Green
    YELLOW =  '\033[0;93m' # Yellow
    RED =     '\033[0;91m' # Red
    WHITE =   '\033[0;97m' # White
    MAGENTA = '\033[0;95m' # Magenta 
    CYAN =    '\033[0;96m' # Cyan
    
    # Aliases
    COMMENTARY = BLUE
    SUCCESS =    GREEN
    WARNING =    YELLOW
    ERROR =      RED
    NOTICE =     WHITE
    PHASE =      MAGENTA
    INFO =       CYAN
    
    _END =       '\033[0m' 
    NONE =       ''            # No color

def cprint(msg: str, color: Colors = Colors.NONE, prefix: str = "", stream: TextIO = sys.stderr, end = '\n'):
    """Print colored output with prefix, wrapped to terminal width."""
    
    try:
        terminal_width = os.get_terminal_size().columns
    except (AttributeError, OSError):
        terminal_width = 80
    
    if prefix:
        prefix += ' '

    # Helper function for printing with appropriate prefix/padding
    def print_line(text, pre, end='\n'):
        print(f"{color.value}{pre}{text}{Colors._END.value}", file=stream, flush=True, end=end)

    # If msg fits, print it directly
    if len(msg) + len(prefix) <= terminal_width:
        print_line(msg, prefix, end=end)
        return
                
    # Let's word-wrap!
    lines = msg.split('\n')
    
    for i, line in enumerate(lines):
        if not line:  # Empty line
            print("", file=stream, flush=True)
            continue
        
        words = line.split(' ')
        current_line = ""
        is_first = i == 0
        
        for word in words:
            if not current_line:
                current_line = word         # if we just += the first word to current_line, we get an extra leading space
            elif len(current_line) + len(word) + 1 > terminal_width - len(prefix):
                print_line(current_line, prefix if is_first else ' ' * len(prefix))
                current_line = word
                is_first = False
            else:
                current_line += ' ' + word
        
        # Print any remaining text
        if current_line:
            print_line(current_line, prefix if is_first else ' ' * len(prefix))

    # Handle custom end character
    if end != '\n':
        print(end=end, file=stream, flush=True)

def info(msg: str, end: str = '\n'):
    cprint(msg, Colors.INFO, end=end)

def success(msg: str, end: str = '\n'):
    cprint(msg, Colors.SUCCESS, end=end)

def commentary(msg: str, end: str = '\n'):
    cprint(msg, Colors.COMMENTARY, end=end)

def warning(msg: str, end: str = '\n'):
    cprint(msg, Colors.WARNING, prefix="WARNING:", end=end)

def error(msg: str, end: str = '\n'):
    cprint(msg, Colors.ERROR, prefix="\nERROR:", stream=sys.stderr, end=end)

def notice(msg: str, end: str = '\n'):
    cprint(msg, Colors.NOTICE, end=end)

def phase(msg: str, end: str = '\n'):
    cprint(msg, Colors.PHASE, prefix="==>", end=end)

def debug(msg: str, end: str = '\n'):
    if args.debug:
        cprint(msg, Colors.INFO, prefix="DEBUG:", end=end)

# ----------------------------------------------------------------------------
# Environment Management
# ----------------------------------------------------------------------------

def make_working_directory():
    """Create and manage a temporary working directory."""

    global temp_dir 
    
    try:
        temp_dir = tempfile.TemporaryDirectory(prefix="autosetup_", dir="/tmp")
        os.chdir(temp_dir.name)
        debug(f"Working directory: {temp_dir.name}")
    except OSError as e:
        bail(f"Failed to change to temp directory: {e}")

def cleanup_working_directory():
    if not temp_dir:
        return
    
    if args.preserve:
        info(f"Preserving working directory: {temp_dir.name}")
        temp_dir._finalizer.detach()  # Prevent deletion
        return
    
    try:
        temp_dir.cleanup()
        debug(f"Removed working directory: {temp_dir.name}")
    except OSError as e:
        error(f"Failed to remove working directory: {e}")
    
def bail(message: str = None, exit_code: int = 1):
    """Exit the program with optional error message."""
   
    if message:
        error(message)
    cleanup_working_directory()        
    sys.exit(exit_code)

def root_check():
    """Verify root privileges when not in dry-run mode."""
    
    if os.geteuid() != 0 and not args.dryrun:
        bail("This script must be run as root")
 
# ----------------------------------------------------------------------------
# Show the difference between installed packages and package list
# ----------------------------------------------------------------------------

# Constants for package filtering
PKG_NAME_RE = re.compile(r'^[A-Za-z0-9][A-Za-z0-9+.\-]+$')
METAPACKAGE_SIZE_THRESHOLD_KB = 30
SYSTEM_PACKAGE_PATTERNS = frozenset([
    "grub", "efi", "shim", "lvm", "initramfs", "kernel", "linux-",
    "systemd", "udev", "dbus", "NetworkManager", "language-pack-", "xdg-desktop-portal"
])
LIBRARY_SECTIONS = frozenset(["libs", "libdevel"])
LIBRARY_PREFIXES = ("lib", "python3-", "node-")
ARCHITECTURE_SUFFIXES = frozenset(['amd64','i386','arm64','armhf','armel','ppc64el','s390x','any'])

def _normalize_pkg_name(name: str) -> str:
    """Normalize package name by removing architecture suffixes."""
    token = name.strip().split()[0]
    if ':' in token:
        base, suffix = token.split(':', 1)
        if suffix in ARCHITECTURE_SUFFIXES:
            token = base
    return token

@lru_cache(maxsize=None)
def _apt_show_field(pkg: str) -> dict:
    """Return selected fields from `apt-cache show`."""
    try:
        out = subprocess.run(
            ["apt-cache", "show", pkg],
            capture_output=True, text=True, check=True
        ).stdout.splitlines()
    except subprocess.CalledProcessError:
        return {}
    fields = {}
    for line in out:
        if not line or ":" not in line:
            continue
        k, v = line.split(":", 1)
        k, v = k.strip().lower(), v.strip()
        if k in ("essential", "priority", "section", "installed-size"):
            fields[k] = v
    return fields

def _batch_apt_show_fields(packages: list[str]) -> dict[str, dict]:
    """Batch fetch apt-cache show data for multiple packages."""
    if not packages:
        return {}
    
    try:
        # Use apt-cache show with multiple packages
        result = subprocess.run(
            ["apt-cache", "show"] + packages,
            capture_output=True, text=True, check=True
        )
    except subprocess.CalledProcessError:
        # Fall back to individual calls if batch fails
        return {pkg: _apt_show_field(pkg) for pkg in packages}
    
    pkg_fields = {}
    current_pkg = None
    current_fields = {}
    
    for line in result.stdout.splitlines():
        if not line:
            if current_pkg:
                pkg_fields[current_pkg] = current_fields
                current_pkg = None
                current_fields = {}
            continue
            
        if ":" not in line:
            continue
            
        k, v = line.split(":", 1)
        k, v = k.strip().lower(), v.strip()
    
        if k == "package":
            if current_pkg:
                pkg_fields[current_pkg] = current_fields
            current_pkg = v
            current_fields = {}
        elif k in ("essential", "priority", "section", "installed-size"):
            current_fields[k] = v
    
    # Don't forget the last package
    if current_pkg:
        pkg_fields[current_pkg] = current_fields
        
    return pkg_fields

def is_essential(pkg: str) -> bool:
    return _apt_show_field(pkg).get("essential", "").lower() == "yes"

def is_priority_required(pkg: str) -> bool:
    return _apt_show_field(pkg).get("priority", "").lower() == "required"

def is_metapackage(pkg: str) -> bool:
    f = _apt_show_field(pkg)
    if f.get("section", "").lower() == "metapackages":
        return True
    try:
        sz = int(f.get("installed-size", "0"))
    except ValueError:
        sz = 0
    # heuristic: tiny footprint (KB) ⇒ likely meta (docs only)
    return sz > 0 and sz < 30

def _should_filter_package(package_name: str, metadata: dict[str, str]) -> tuple[bool, str]:
    """
    Determine if a package should be filtered out from manual package consideration.
    
    Returns:
        (should_filter, reason) - True if package should be filtered, with reason
    """
    # Essential packages
    if metadata.get("essential", "").lower() == "yes":
        return True, "essential"
    
    # Required priority packages
    if metadata.get("priority", "").lower() == "required":
        return True, "required priority"
    
    # Metapackages
    section = metadata.get("section", "").lower()
    if section == "metapackages":
        return True, "metapackage section"
    
    # Small packages (likely metapackages)
    try:
        size_kb = int(metadata.get("installed-size", "0"))
        if 0 < size_kb < METAPACKAGE_SIZE_THRESHOLD_KB:
            return True, f"small size ({size_kb}KB)"
    except ValueError:
        pass
    
    # Library packages
    if section in LIBRARY_SECTIONS or package_name.startswith(LIBRARY_PREFIXES):
        return True, "library package"
    
    # System packages
    if any(pattern in package_name.lower() for pattern in SYSTEM_PACKAGE_PATTERNS):
        return True, "system package"
    
    return False, "manual package"

@lru_cache(maxsize=None)
def _direct_deps(pkg_name: str) -> Set[str]:
    """Direct Depends/PreDepends only; prefer first alternative."""
    deps: Set[str] = set()
    try:
        out = subprocess.run(
            ["apt-cache", "depends", pkg_name],
            capture_output=True, text=True, check=True
        ).stdout.splitlines()
    except subprocess.CalledProcessError:
        return deps
    for line in out:
        s = line.strip()
        if s.startswith("Depends:") or s.startswith("PreDepends:"):
            rhs = s.split(":", 1)[1].strip()
            alt = rhs.split("|", 1)[0].strip()
            dep = _normalize_pkg_name(alt)
            if PKG_NAME_RE.match(dep):
                deps.add(dep)
    return deps

def _get_batch_dependencies(packages: list[str]) -> set[str]:
    """Get all dependencies for a list of packages efficiently."""
    dependencies = set()
    
    try:
        # Single apt-cache depends call for all packages
        result = subprocess.run(
            ["apt-cache", "depends"] + packages,
            capture_output=True, text=True, check=True
        )
        
        # Parse dependencies from batch output
        for line in result.stdout.splitlines():
            line = line.strip()
            if line.startswith(("Depends:", "PreDepends:")):
                dependency_spec = line.split(":", 1)[1].strip()
                # Take first alternative if there are multiple options
                first_alternative = dependency_spec.split("|", 1)[0].strip()
                normalized_dep = _normalize_pkg_name(first_alternative)
                
                if PKG_NAME_RE.match(normalized_dep):
                    dependencies.add(normalized_dep)
                    
    except subprocess.CalledProcessError as e:
        debug(f"Batch dependency lookup failed: {e}, falling back to individual calls")
        # Fall back to individual dependency calls
        for package in packages:
            dependencies.update(_direct_deps(package))
    
    return dependencies

def build_is_installed(installed_packages: PackageDatabase) -> set[str]:
    """
    Build list of manually installed packages, excluding system/library dependencies.
    
    Returns packages that are:
    1. Manually installed (from apt-mark showmanual)
    2. Not system packages (grub, kernel, etc.)
    3. Not libraries or development packages
    4. Not dependencies of other manual packages
    """
    
    # Normalize all package names
    all_package_names = [_normalize_pkg_name(str(pkg)) for pkg in installed_packages]
    
    # Batch fetch metadata for filtering
    package_metadata = _batch_apt_show_fields(all_package_names)
    
    # Filter to candidate packages (not system/library packages)
    candidates = []
    filtered_count = 0
    
    for package_name in all_package_names:
        metadata = package_metadata.get(package_name, {})
        should_filter, reason = _should_filter_package(package_name, metadata)
        
        if not should_filter:
            candidates.append(package_name)
    
    if not candidates:
        return set()
    
    # Get dependencies of all candidate packages
    dependencies_of_candidates = _get_batch_dependencies(candidates)
    
    # Exclude packages that are dependencies of other candidates
    manual_packages = set()
    dependency_count = 0
    
    for package_name in candidates:
        if not package_name in dependencies_of_candidates:
            manual_packages.add(package_name)
    
    return manual_packages

def _check_packages_installed(package_names: set[str]) -> set[str]:
    """Check which packages from a set are actually installed (handles virtual packages)."""
    installed = set()
    
    for package_name in package_names:
        # First try direct package check
        try:
            result = subprocess.run(
                ['dpkg-query', '-W', '-f=${Status}', package_name],
                capture_output=True, text=True
            )
            if "install ok installed" in result.stdout:
                installed.add(package_name)
                continue
        except subprocess.CalledProcessError:
            pass
        
        # If direct check failed, check if any installed package provides this package
        try:
            result = subprocess.run(
                ['apt-cache', 'showpkg', package_name],
                capture_output=True, text=True, check=True
            )
            
            # Parse the "Reverse Provides:" section to find providers
            lines = result.stdout.splitlines()
            found_reverse_provides = False
            
            for line in lines:
                if line.startswith("Reverse Provides:"):
                    found_reverse_provides = True
                    continue
                elif found_reverse_provides and line.strip():
                    # Line format: "provider_package version (= )" - extract provider name
                    provider = line.split()[0]
                    # Check if this provider is installed
                    try:
                        provider_result = subprocess.run(
                            ['dpkg-query', '-W', '-f=${Status}', provider],
                            capture_output=True, text=True
                        )
                        if "install ok installed" in provider_result.stdout:
                            installed.add(package_name)
                            break
                    except subprocess.CalledProcessError:
                        continue
                elif found_reverse_provides and not line.strip():
                    # End of reverse provides section (empty line)
                    break
                        
        except subprocess.CalledProcessError:
            continue  # Package not found in apt cache
    
    return installed

def delta(installed_packages: PackageDatabase, package_entries: PackageList) -> None:
    """
    Show differences between installed packages and the package list.
    
    Compares:
    1. Manually installed packages (filtered) vs packages in packagelist 
    2. Packages in packagelist vs actually installed packages (any status)
    """
    # Get packages that should be installed according to packagelist
    should_be_installed = {
        str(pkg) for pkg in package_entries
        if not pkg.has_flags(Package.Flags.virtual) and pkg.hostname_matches()
    }
    
    # Get manually installed packages (filtered for relevance)  
    manually_installed = build_is_installed(installed_packages)
    
    # Check which packagelist packages are actually installed
    packagelist_packages_installed = _check_packages_installed(should_be_installed)
    
    # Calculate differences
    extra_manually_installed = sorted(manually_installed - should_be_installed)
    missing_from_system = sorted(should_be_installed - packagelist_packages_installed)
    
    # Display results
    cprint(f"Manually installed but not in packagelist: {len(extra_manually_installed)}", Colors.CYAN)
    if extra_manually_installed:
        cprint(", ".join(extra_manually_installed), Colors.WHITE)
    
    cprint(f"In packagelist but not installed: {len(missing_from_system)}", Colors.CYAN)  
    if missing_from_system:
        cprint(", ".join(missing_from_system), Colors.WHITE)
    
    bail(exit_code=0)

# ----------------------------------------------------------------------------
# Main Program
# ----------------------------------------------------------------------------
class CommaSeparatedSet(argparse.Action):
    """Parse comma-separated values into a set, allowing multiple occurrences."""
    
    def __call__(self, parser, namespace, values, option_string=None):
        # Parse comma-separated values from current argument
        new_values = {v.strip() for v in values.split(",") if v.strip()}
        
        # Get existing set or create empty one
        existing = getattr(namespace, self.dest, set()) or set()
        
        # Merge with existing values
        setattr(namespace, self.dest, existing | new_values)

def parse_arguments() -> argparse.Namespace:
    """Parse and validate command line arguments."""
    parser = argparse.ArgumentParser(
        description="Install packages and manage package repository dependencies",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    # Basic options
    parser.add_argument("-n", "--dryrun", action="store_true",
                        help="Dry run (do not actually install packages)")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Show subprocess output")
    parser.add_argument("--debug", action="store_true",
                        help="Print debug information and script source")
    parser.add_argument("-p", "--preserve", action="store_true",
                        help="Preserve the temporary working directory")
    parser.add_argument("-s", "--stop-on-errors", action="store_true",
                        help="Stop installation on first error")
    parser.add_argument("--version", action="version",
                        version=f"%(prog)s version {VERSION}")

    # Package filtering options
    parser.add_argument("--skip", action=CommaSeparatedSet, default=set(),
                        help="Skip these packages (comma-separated, repeatable)")
    parser.add_argument("--skip-flags", action=CommaSeparatedSet, default=set(),
                        help="Skip packages with these flags (comma-separated, repeatable)")
    parser.add_argument("--only", action=CommaSeparatedSet, default=set(),
                        help="Install only these packages (comma-separated, repeatable)")
    parser.add_argument("--only-flags", action=CommaSeparatedSet, default=set(),
                        help="Install only packages with these flags (comma-separated, repeatable)")
    parser.add_argument("--force-all", action="store_true",
                        help="Force reinstall all packages")

    # Action options (mutually exclusive with installation)
    action_group = parser.add_mutually_exclusive_group()
    action_group.add_argument("--show", action="store_true",
                             help="Show package names in the package list")
    action_group.add_argument("--list", action="store_true",
                             help="Show detailed package list")
    action_group.add_argument("--delta", action="store_true",
                             help="Show differences between installed and package list")

    # Required positional argument
    parser.add_argument("filename", help="Package list file path")

    args = parser.parse_args()

    # Post-process arguments
    args.filename = Path(args.filename).resolve()

    return args

def get_subprocess_options(verbose: bool) -> dict[str, any]:
    """Get subprocess run options based on verbosity setting."""
    return (
        {"stdout": None, "stderr": None} if verbose 
        else {"stdout": subprocess.DEVNULL, "stderr": subprocess.DEVNULL}
    )    

def main() -> None:
    """Main program entry point."""
    # Parse command line arguments
    args = parse_arguments()
    
    # Set up global configuration (needed by various functions)
    global run_opts
    run_opts = get_subprocess_options(args.verbose)
    
    # Load package database and package list
    installed_packages = PackageDatabase()
    installed_packages.load()
    
    try:
        package_entries = PackageList(args.filename)
    except Exception as e:
        bail(f"Error loading package list: {e}")
    
    if not package_entries:
        warning(f"No packages found in '{args.filename}'")
        return

    # Handle information-only commands
    if args.show:
        package_entries.show()
        return
    
    if args.list:
        package_entries.list()
        return
    
    if args.delta:
        delta(installed_packages, package_entries)
        return  # delta() calls bail() to exit
    
    # Proceed with installation
    _perform_installation(args, package_entries)

def _perform_installation(parsed_args: argparse.Namespace, package_entries: PackageList) -> None:
    """Perform the actual package installation process."""
    # Set up global args (needed by Package methods)
    global args
    args = parsed_args
    
    # Check permissions
    if not args.dryrun:
        root_check()

    # Set up working environment
    make_working_directory()
    
    try:
        # Install packages  
        installed_packages = PackageDatabase()
        installed_packages.load()
        package_entries.install(installed_packages)
    finally:
        # Always clean up
        cleanup_working_directory()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        bail("\nInstallation interrupted by user")
    except Exception as e:
        # Check if debug mode was requested
        debug_mode = any(arg in sys.argv for arg in ('--debug', '-d'))
        if debug_mode:
            raise
        bail(f"Program error (use --debug for stack trace): {e}")
