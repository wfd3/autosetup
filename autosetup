#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import tempfile
import urllib.request
import socket
from enum import Enum
from pathlib import Path
from dataclasses import dataclass, field
from typing import List, Dict, Set, Tuple, Optional

# ----------------------------------------------------------------------------
# Constants and Configuration
# ----------------------------------------------------------------------------

VERSION = "1.1"

temp_dir: Optional[tempfile.TemporaryDirectory] = None
APT_SOURCES_DIR: str = "/etc/apt/sources.list.d"

# ----------------------------------------------------------------------------
# Data classes
# ----------------------------------------------------------------------------

# PackageDatabase: Installed package database
@dataclass
class PackageDatabase:
    """Class to manage the installed package database."""

    installed_packages: Set[str] = field(default_factory=set)

    def load(self) -> None:
        """Load the list of installed packages."""

        try:
            result = subprocess.run(
                ['apt', 'list', '--installed'],
                capture_output=True, text=True, check=True
            )
            self.installed_packages = {
                p.split('/')[0] 
                for p in result.stdout.splitlines()[1:] 
                if '/' in p
            }
        except subprocess.CalledProcessError:
            bail("Error getting list of installed packages")

    def is_installed(self, package: str) -> bool:
        """Check if a package is already installed."""
    
        return package in self.installed_packages

# Package: Package description class
@dataclass
class Package:
    class ScriptPhase(Enum):
        PRE_INSTALL =  'prescript'
        POST_INSTALL = 'postscript'

    name:              str = None
    install_method:    str = 'apt'  # 'apt' or 'deb'
    url:               Optional[str] = None    # for deb downloads
    repositories:      Set[str] = field(default_factory=set)
    sources:           List[tuple[str, str]] = field(default_factory=list)  # [(filename, content),...]
    scripts:           Dict[ScriptPhase, str] = field(default_factory=dict)
    flags:             Set[str] = field(default_factory=set)
    hosts:             Set[str] = field(default_factory=set)
    downloaded_file:   Optional[str] = None
    apt_package:       str = None
    _force_apt_update: bool = False
    _SEMAPHORE_DIR:    Path = Path("/var/run/autosetup")

    # Class-level constant
    SCRIPT_ONCE_FLAGS = {
        ScriptPhase.PRE_INSTALL:  'prescript_run_once',
        ScriptPhase.POST_INSTALL: 'postscript_run_once'
    }
    SCRIPT_BOTH_ONCE_FLAG = 'script_run_once'

    def __str__(self) -> str:
        return self.name
    
    def needs_apt_update(self) -> bool:
        return self._force_apt_update
    
    def update_apt_database(self) -> None:
        """ Force update apt package database """
    
        if args.dryrun:
            info("Would update apt package database")
            return

        info("Updating package database")
        try:
            subprocess.run(['apt', 'update'], **run_opts, check=True)
            success("Package database updated")
        except subprocess.CalledProcessError:
            bail("Error updating package database")
    
    def has_flags(self, *flags: str) -> bool:
        """Check if the package has any of the given flags."""
        return bool(self.flags & set(flags))
    
    def run_once(self, phase: ScriptPhase) -> bool:
        """Check if the script should only be run once."""
        return self.has_flags(self.SCRIPT_ONCE_FLAGS[phase]) or self.has_flags(self.SCRIPT_BOTH_ONCE_FLAG)
    
    import socket

    def hostname_matches(self) -> bool:
        """
        Check if current hostname matches any pattern in the given set.
        Patterns can be:
        - Direct hostname matches (web, web.example.com)
        - Domain wildcards (*.example.com)
        - Exclusions with ! prefix (!web, !*.example.com)
        
        Args:
            hostname_patterns (set): Set of hostname patterns to check
            
        Returns:
            bool: True if hostname matches any positive pattern and no exclusions
        """
        current = socket.getfqdn()
        
        # Split patterns into inclusions and exclusions
        exclusions = {p[1:] for p in self.hosts if p.startswith('!')}
        inclusions = {p for p in self.hosts if not p.startswith('!')}
        
        def matches_pattern(hostname, pattern):
            if pattern.startswith('*.'):
                # Domain wildcard match
                domain = pattern[2:]  # Remove *. prefix
                return hostname.endswith(domain)
            else:
                # Direct or partial hostname match
                return pattern in hostname or hostname.startswith(f"{pattern}.")
        
        # Check exclusions first
        for pattern in exclusions:
            if matches_pattern(current, pattern):
                return False
                
        # If no inclusions specified, any non-excluded host matches
        if not inclusions:
            return True
            
        # Check inclusions
        for pattern in inclusions:
            if matches_pattern(current, pattern):
                return True
                
        return False
    
    def add_hosts(self, hosts: Set[str]) -> None:
        """Add hosts to the package."""
        self.hosts.update(hosts)

    def add_scripts(self, phase: ScriptPhase, script: str) -> None:
        """Add a script to the package."""
        self.scripts[phase] = script

    def get_script(self, phase: ScriptPhase) -> str:
        """Get the script for the given phase."""
        return self.scripts.get(phase, None)

    def skip(self):
        """ Return True if this package should be skipped """

        if 'force' in self.flags or args.force_all:
            return False, "forcing package"

        if installedPackages.is_installed(self.name):
            return True, "already installed"

        if self.has_flags('skip'):
            return True, "package has skip flag"
        
        if args.skip and self.name in args.skip:
            return True, "--skip flag"
        
        if args.skip_flags and self.flags & args.skip_flags:
            return True, "--skip-flags flag"
        
        if args.only and self.name not in args.only:
            return True, "--only flag"
            return True
        
        if args.only_flags and not self.flags & args.only_flags:
            return True, "--only-flags flag"
        
        if not self.hostname_matches():
            return True, "hostname"
        
        return False, "Not skipping"

    def pretty_script(self, script: ScriptPhase) -> str:
        """Format script commands for display."""

        s = self.get_script(script)
        return f"    " + s  # TODO: this needs to be improved
    
    def pretty_print_script(self, script: ScriptPhase) -> None:
        print(f"{self.pretty_script(script)}")
    
    # Semaphore functions
    def _semaphore_name(self, phase: ScriptPhase) -> str:
        """Return the semaphore filename for a package and script phase."""
   
        return self._SEMAPHORE_DIR / f"{self.name}.{self.SCRIPT_ONCE_FLAGS[phase]}"

    def semaphore_create(self, phase: ScriptPhase):
        """Create an semaphore file for this package, for the script phase."""
    
        path = self._semaphore_name(phase)    

        if args.dryrun:
            info(f"Would create semaphore file: {path}")
            return
        
        path.parent.mkdir(parents=True, exist_ok=True)  # Create all parent directories
        try:
            path.touch()
        except OSError as e:
            bail(f"Could not create semaphore file {path}: {e}")

    def semaphore_exists(self, phase: ScriptPhase) -> bool:
        """Check if a semaphore exists for this package and script phase."""
        return self._semaphore_name(phase).is_file()
    
    # Installation functions

    def run_script(self, phase: ScriptPhase):
        """Run a script for this package and phase."""

        script = self.get_script(phase)

        if not script:
            return

        run_once = self.run_once(phase)

        if run_once and self.semaphore_exists(phase):
            debug(f"Skipping {self.name} {phase.value}, already run")
            return

        if args.dryrun:
            info(f"Would run {self.name} {phase.value}:")
            if args.debug:
                self.pretty_print_script(phase)
            return
            
        debug(f"Running {self.name} {phase.value}")
        if args.debug or args.verbose:
            self.pretty_print_script(phase)
        
        try:
            subprocess.run(script, **run_opts, shell=True, check=True)
            if run_once:
                self.semaphore_create(phase)
        except subprocess.CalledProcessError as result:
            error(f"Error running {self.name} {phase.value}:")
            self.pretty_print_script(phase)
            error(f"Return code: {result.returncode}")
            bail(f"Script error for package {self.name}")

    def get_name_from_deb_package(self, package) -> str:
        """Extract the package name from a deb package file."""
        try:
            result = subprocess.run(['dpkg-deb', '-f', package, "Package"], 
                                    capture_output=True, text=True, check=True)
            return result.stdout.strip()
        except subprocess.CalledProcessError:
            bail(f"Error extracting package name from {package}")

    def is_deb_package_installed(self, package_name):
        """ Check if a package is installed using dpkg-query.
            Returns True if the package is installed, False otherwise.
        """
        try:
            cmd = ["dpkg-query", "-W", "-f=${Status}", package_name]
            result = subprocess.run(cmd, capture_output=True, text=True)
            return "install ok installed" in result.stdout
        except subprocess.CalledProcessError:
            return False
    
    def install_deb(self):
        """Install a package from a deb file."""
        
        if self.is_deb_package_installed(self.name) and not self.has_flags('force'):
            debug(f"Package {self.name} already installed, skipping")
            return
        
        if not self.downloaded_file:
            bail(f"No downloaded file for package {self.name}")
            
        package_name = self.get_name_from_deb_package(self.downloaded_file)

        if self.is_deb_package_installed(package_name) and not self.has_flags('force'):
            debug(f"Downloaded package {self.name} already installed, skipping")
            return

        if args.dryrun:
            info(f"Would install .deb package {self.name} ({package_name}) from {self.downloaded_file}")
            return

        try:
            subprocess.run(['dpkg', '-i', self.downloaded_file], **run_opts, check=True)
        except subprocess.CalledProcessError:
            bail(f"Error installing package {self.name} from {self.downloaded_file}")

    def install_apt(self):
        """Install a package via apt."""
        
        if not self.apt_package:
           bail("No APT package name specified")
           return
         
        if self.has_flags('no_apt'):
            debug(f"Skipping package {self.name}")
            return
        
        if installedPackages.is_installed(self.name) and not self.has_flags('force'): 
            debug(f"APT package {self.name} already installed, skipping")
            return
        
        if args.dryrun:
            info(f"Would install apt package {self.apt_package}")
            return

        try:
            # use reinstall to ensure package is installed even if it is already installed.  The 
            # 'is_installed() and not force' check above will prevent installed packages that should
            # not be reinstalled from being reinstalled.
            subprocess.run(['apt', 'reinstall', '-y', self.apt_package], **run_opts, check=True)
        except subprocess.CalledProcessError:
            bail(f"Error installing package {self.apt_package}")
    
    def install_package(self) -> None:
        match self.install_method:
            case 'deb':
                self.install_deb()
            case 'apt':
                self.install_apt()
            case _:
                bail(f"Unknown install method for package {self.name}")
    
    def add_repositories(self):
        """Add repositories for the package."""
        
        for repo in self.repositories:
            if args.dryrun:
                info(f"Would add repository: {repo}")
                continue

            try:
                debug(f"Adding repository: {repo}")
                subprocess.run(['add-apt-repository', '-y', '-n', repo], **run_opts, check=True)
                self._apt_update_needed = True
            except subprocess.CalledProcessError:
                bail(f"Error adding repository: {repo}")

    def add_sources(self):
        """Add sources for the package by creating files in /etc/apt/sources.list.d/."""
       
        for filename, content in self.sources:
            if args.dryrun:
                info(f"Would add '{content}' to {filename}")
                continue

            try:
                if not Path(filename).is_file():
                    debug(f"Adding source file: {filename}")
                    with open(filename, 'w') as sources_file:
                        sources_file.write(f"{content}\n")
                    self._apt_update_needed = True 
                else:
                    warning(f"'{filename}' exists, skipping")
            except Exception as e:
                bail(f"Error adding source to {filename}: {e}")

    def download_package(self) -> None:
        
        if not self.url:
            debug(f"No URL for package {self.name}")
            return
            
        if installedPackages.is_installed(self.name) and not self.has_flags('force'):
            debug("Not downloading package, already installed")
            return

        self.downloaded_file = self.name + ".deb"

        if args.dryrun:
            info(f"Would download: {self.url} for package {self.name}")
            return

        try:
            info(f"Downloading {self.url}")
            info(f"    to file {self.downloaded_file}")
            opener = urllib.request.build_opener(urllib.request.HTTPRedirectHandler())
            urllib.request.install_opener(opener)           
            urllib.request.urlretrieve(self.url, self.downloaded_file)
        
            if not Path(self.downloaded_file).is_file():
                bail(f"Downloaded file {self.downloaded_file} not found")

        except Exception as e:
            bail(f"Error downloading from URL {self.url}: {e}")

    def install(self) -> None:
        """Install the package."""

        notice(f"{self.name+': ':<32}", end='')

        skip, reason = self.skip()
        if skip:
            commentary(f"skipped, {reason}")
            return
        
        # Order of operation:
        #   repos, sources, preinstall script, download, install, postinstall script

        notice("Repo ", end='')
        self.add_repositories()
        notice("Sources", end='')
        self.add_sources()
        if self.needs_apt_update():
            notice("apt-update ", end='')
            self.update_apt_database()
        notice(f"Pre ", end='')
        self.run_script(self.ScriptPhase.PRE_INSTALL)
        notice("DLoad ", end='')
        self.download_package()
        notice("PkgIns ", end='')
        self.install_package()
        notice("Post ", end='')
        self.run_script(self.ScriptPhase.POST_INSTALL)

        success("DONE")

# PackageList: List of PackageAttributes parse from the packagelist file
@dataclass
class PackageList:
    _packages:          List[Package] = field(default_factory=list)
    _apt_update_needed: bool = False

    def __iter__(self):
        return iter(self._packages)
         
    def __bool__(self) -> bool:
        return bool(self._packages)
    
    def append(self, pkg: Package):
        self._packages.append(pkg)
  
    def _filter_packages(self, flags: tuple[str, ...], match: bool = True) -> 'PackageList':
        filtered = [pkg for pkg in self._packages if pkg.has_flags(*flags) == match]
        return PackageList(_packages=filtered)

    def get_packages_with_flags(self, *flags: str) -> 'PackageList':
        return self._filter_packages(flags, match=True)
   
    def get_packages_without_flags(self, *flags: str) -> 'PackageList':
        return self._filter_packages(flags, match=False)
    
    #-------------------------------------------------
    # Package List Parsing
   
    def _filter_comments(self, line: str) -> str:
        """Remove comments but preserve # characters in quoted strings."""

        if not line:
            return line
        
        result = []    
        in_quote = False
        quote_char = None
        i = 0
        
        while i < len(line):
            char = line[i]
            
            # Handle quotes
            if char in '"\'':
                if not in_quote:
                    in_quote = True
                    quote_char = char
                elif char == quote_char:
                    in_quote = False
                    quote_char = None
                    
            # Handle comment outside of quotes
            elif char == '#' and not in_quote:
                break
                
            result.append(char)
            i += 1
        
        return ''.join(result).rstrip()

    def _parse_directive(self, line: str, pkg: Package) -> bool:
        """Parse a single directive line and update package attributes."""

        try:
            dtype, content = line.split(':', 1)
        except ValueError:
            return False

        dtype = dtype.strip().lower()
        content = content.strip()
        
        match dtype:
            case 'hosts':
                pkg.add_hosts(f.strip().lower() for f in content.split(','))
            case 'flags':
                pkg.flags.update(f.strip().lower() for f in content.split(','))
                if 'force' in pkg.flags and 'skip' in pkg.flags:
                    bail(f"Package {pkg.name} cannot have both 'force' and 'skip' flags")
            case 'deb':
                pkg.install_method = 'deb'
                pkg.url = content
            case 'repo':
                pkg.repositories.add(content)
            case 'source':
                try:
                    fname, src = content.split(None, 1)
                    fname = str(Path(APT_SOURCES_DIR).joinpath(Path(fname).name))
                    pkg.sources.append((fname, src))
                except ValueError:
                    bail(f"Invalid source format: {content}")
            case Package.ScriptPhase.PRE_INSTALL.value:
                pkg.add_scripts(Package.ScriptPhase.PRE_INSTALL, content)
            case Package.ScriptPhase.POST_INSTALL.value:
                pkg.add_scripts(Package.ScriptPhase.POST_INSTALL, content)
            case 'apt':
                pkg.apt_package = content
            case _:
                return False
        return True

    def load(self, filename: Path) -> None:
        """Parse package list file into list of Package."""
        self._packages = []
        current_pkg = None
    
        # Read and process file
        if not filename.is_file():
            bail(f"Package file '{filename}' does not exist or is not readable.")

        try:
            with open(filename) as f:
                lines = []
                continued = ''
                
                for line_num, line in enumerate(f, start=1):
                    # Handle comments and empty lines
                    line = self._filter_comments(line.rstrip())
                    if not line:
                        continue
                        
                    # Handle line continuation
                    if line.endswith('\\'):
                        continued += line[:-1] + '\n'
                        continue
                    
                    if continued:
                        line = continued + line
                        continued = ''
                    
                    # Package name or directive?
                    if not line.startswith(' '):
                        # New package
                        if ':' in line and not line.endswith(':'):
                            bail(f"Invalid package format at line {line_num}: {line}\n  Package names and directives must be on separate lines")
                        
                        name = line.rstrip(':')
                        current_pkg = Package(name=name, apt_package=name)
                        self.append(current_pkg)
                    else:
                        # Directive
                        if not current_pkg:
                            bail(f"Directive without package name at line {line_num}")
                        if not self._parse_directive(line.strip(), current_pkg):
                            bail(f"Unknown directive at line {line_num}: {line}")
        except OSError as e:
            bail(f"Error reading {filename}: {e}")

    #-------------------------------------------------

    def install(self) -> None:

        # Installation phases
        class Phase(Enum):
            START   = 'start'
            REGULAR = 'regular'
            END     = 'end'

        success("Starting package installation")

        # Break package list into the different package phases based on per package flags

        for p in Phase:
            phase_name = p.value
            phase(f"Starting Phase: {phase_name}")
        
            if p == Phase.REGULAR:
                packages = self.get_packages_without_flags(Phase.START.value, Phase.END.value)
            else:
                packages = self.get_packages_with_flags(phase_name)

            if not packages:    
                continue
            
            for pkg in packages:
                pkg.install()

        success("Installation complete")
        
# ----------------------------------------------------------------------------
# Output Functions
# ----------------------------------------------------------------------------
# ANSI color codes for output
COLORS = {
    'COMMENTARY': '\033[94m', # Blue
    'SUCCESS':    '\033[92m', # Green
    'WARNING':    '\033[93m', # Yellow
    'ERROR':      '\033[91m', # Red
    'NOTICE':     '\033[97m', # White
    'PHASE':      '\033[95m', # Magenta 
    'INFO':       '\033[96m', # Cyan
    'END':        '\033[0m'
}

def colored_output(msg: str, color: str, prefix: str = "", is_error: bool = False, end = '\n'):
    """Print colored output with prefix."""
    stream = sys.stderr if is_error else sys.stdout
    if prefix:
        prefix += " "
    print(f"{COLORS[color]}{prefix}{msg}{COLORS['END']}", file=stream, flush=True, end=end)

def info(msg: str, end: str = '\n'):
    colored_output(msg, 'INFO', "", end=end)

def success(msg: str, end: str = '\n'):
    colored_output(msg, 'SUCCESS', end=end)

def commentary(msg: str, end: str = '\n'):
    colored_output(msg, 'COMMENTARY', end=end)

def warning(msg: str, end: str = '\n'):
    colored_output(msg, 'WARNING', "WARNING:", end=end)

def error(msg: str, end: str = '\n'):
    colored_output(msg, 'ERROR', "\nERROR:", True, end=end)

def notice(msg: str, end: str = '\n'):
    colored_output(msg, 'NOTICE', end=end)

def phase(msg: str, end: str = '\n'):
    colored_output(msg, 'PHASE', "==>", end=end)

def debug(msg: str, end: str = '\n'):
    if args.debug:
        colored_output(msg, 'INFO', "DEBUG:", end=end)

# ----------------------------------------------------------------------------
# Environment Management
# ----------------------------------------------------------------------------

def make_working_directory():
    """Create and manage a temporary working directory."""

    global temp_dir 
    
    try:
        temp_dir = tempfile.TemporaryDirectory(prefix="autosetup_", dir="/tmp")
        os.chdir(temp_dir.name)
        debug(f"Working directory: {temp_dir.name}")
    except OSError as e:
        bail(f"Failed to change to temp directory: {e}")

def cleanup_working_directory():
    if not temp_dir:
        debug("No working directory to clean up")
        return
    
    if args.preserve:
        info(f"Preserving working directory: {temp_dir.name}")
        temp_dir._finalizer.detach()  # Prevent deletion
        return
    
    try:
        temp_dir.cleanup()
        debug(f"Removed working directory: {temp_dir.name}")
    except OSError as e:
        error(f"Failed to remove working directory: {e}")
    
def bail(message: str = None, exit_code: int = 1):
    """Exit the program with optional error message."""
   
    if message:
        error(message)
    cleanup_working_directory()        
    sys.exit(exit_code)

def root_check():
    """Verify root privileges when not in dry-run mode."""
    
    if os.geteuid() != 0 and not args.dryrun:
        bail("This script must be run as root")
 
# ----------------------------------------------------------------------------
# Main Program
# ----------------------------------------------------------------------------

def comma_separated_to_set(alist: List[str]) -> Set[str]:
    """Parse out a comma-separated list of comments into a set of strings """
    
    items = set()

    if alist:
        for a in alist:
            for arg in a.split(','):
                items.add(arg.strip())

    return items

def parse_arguments() -> argparse.Namespace:
    """Parse command line arguments."""
 
    global args

    parser = argparse.ArgumentParser(
        description='Install packages and manage package repository dependencies',
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-n', '--dryrun', action='store_true',
                      help='Dry run (do not actually install packages)')
    parser.add_argument('-p', '--preserve', action='store_true',
                      help='Preserve the temporary working directory')
    parser.add_argument('--version', action='version',
                      version=f'%(prog)s version {VERSION}')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Show subprocess output')
    parser.add_argument('--debug', action='store_true', 
                        help='Print any script source before execution')
    parser.add_argument('filename', help='Package list file')
    parser.add_argument('--skip', nargs=1, 
                      help=f'Do not install package these packages (comma separated)')
    parser.add_argument('--skip-flags', nargs=1,
                      help=f'Do not install packages with these flags (comma separated)')
    parser.add_argument('--only-flags', nargs=1,
                        help='Only install packages with these flags (comma separated)')
    parser.add_argument('--only', nargs=1,
                        help='Only install these packages (comma separated)')
    parser.add_argument('--force-all', action='store_true',
                        help='Force install all the packages')
    
    args = parser.parse_args()

    # Parse out comma separated arguments into sets
    args.skip       = comma_separated_to_set(args.skip)
    args.skip_flags = comma_separated_to_set(args.skip_flags)
    args.only_flags = comma_separated_to_set(args.only_flags)
    args.only       = comma_separated_to_set(args.only)

    # Show subprocess output?
    global run_opts
    run_opts = {
        'stdout': subprocess.DEVNULL,
        'stderr': subprocess.DEVNULL
    }
    if args.verbose:
        run_opts = {
            'stdout': None,
            'stderr': None
        }

    # Validate input file
    args.filename = Path(args.filename).resolve()
    

def main():

    parse_arguments()

    global installedPackages
    installedPackages = PackageDatabase()
    installedPackages.load()

    global packageEntries 
    packageEntries = PackageList()
    packageEntries.load(args.filename)
    
    if not packageEntries:
        warning(f"No packages in package list '{args.filename}'")
        return
  
    # Set up environment
    if not args.dryrun:
        root_check()

    make_working_directory()

    packageEntries.install()

    cleanup_working_directory()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        bail("\nInstallation interrupted by user")
    except Exception as e:
        if '--debug' in sys.argv:
            raise
        bail(f"Unexpected error: {e}")
