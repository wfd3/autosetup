#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import tempfile
import shutil
import urllib.request
from pathlib import Path
from dataclasses import dataclass, field
from typing import List, Dict, Set, Tuple, Optional

# ----------------------------------------------------------------------------
# Constants and Configuration
# ----------------------------------------------------------------------------

VERSION = "1.1"

# Package data structures
@dataclass
class PackageAttributes:
    name:            str
    install_method:  str = 'apt'  # 'apt' or 'deb'
    url:             Optional[str] = None    # for deb downloads
    repositories:    Set[str] = field(default_factory=set)
    sources:         List[tuple[str, str]] = field(default_factory=list)  # [(filename, content),...]
    pre_scripts:     List[str] = field(default_factory=list)
    post_scripts:    List[str] = field(default_factory=list)
    flags:           Set[str] = field(default_factory=set)
    downloaded_file: Optional[str] = None
    apt_package:     str = None
    
@dataclass
class PackageList:
    packages: List[PackageAttributes]
 
    def __iter__(self):
        return iter(self.packages)
   
    def is_empty(self) -> bool:
       return (not self.packages)
   
    def get_packages_with_flags(self, *flags: str) -> 'PackageList':
        flag_set = set(flags)
        matching_packages = []
        
        for pkg in self.packages:
            if pkg.flags & flag_set:
                matching_packages.append(pkg)
        
        return PackageList(packages=matching_packages)
   
    def get_packages_without_flags(self, *flags: str) -> 'PackageList':
        flag_set = set(flags)
        matching_packages = []
       
        for pkg in self.packages:
            if not pkg.flags & flag_set:
                matching_packages.append(pkg)

        return PackageList(packages=matching_packages)
   
# Globals
temp_dir = None

# ----------------------------------------------------------------------------
# Output Functions
# ----------------------------------------------------------------------------
# ANSI color codes for output
COLORS = {
    'COMMENTARY': '\033[94m', # Blue
    'SUCCESS':    '\033[92m', # Green
    'WARNING':    '\033[93m', # Yellow
    'ERROR':      '\033[91m', # Red
    'NOTICE':     '\033[97m', # White
    'INFO':       '\033[96m', # Cyan
    'END':        '\033[0m'
}

def colored_output(msg: str, color: str, prefix: str = "==>", is_error: bool = False):
    """Print colored output with prefix."""
    stream = sys.stderr if is_error else sys.stdout
    if prefix:
        prefix += " "
    print(f"{COLORS[color]}{prefix}{msg}{COLORS['END']}", file=stream, flush=True)

def info(msg: str):
    colored_output(msg, 'INFO')

def success(msg: str):
    colored_output(msg, 'SUCCESS')

def commentary(msg: str):
    colored_output(msg, 'COMMENTARY')

def warning(msg: str):
    colored_output(msg, 'WARNING', "==> WARNING:")

def error(msg: str):
    colored_output(msg, 'ERROR', "==> ERROR:", True)

def notice(msg: str):
    colored_output(msg, 'NOTICE', "")

# ----------------------------------------------------------------------------
# Environment Management
# ----------------------------------------------------------------------------

def make_working_directory():
    """Create and manage a temporary working directory."""

    global temp_dir 
    
    temp_dir = tempfile.mkdtemp(suffix='_pkg_install')
    try:
        os.chdir(temp_dir)
    except OSError as e:
        bail(f"Failed to change to temp directory: {e}")

def bail(message: str = None, exit_code: int = 1):
    """Exit the program with optional error message."""
    if message:
        error(message)

    if temp_dir:
        if not args.preserve:
            shutil.rmtree(temp_dir, ignore_errors=True)
        elif message:
            info(f"Preserving working directory: {temp_dir}")

    sys.exit(exit_code)

def root_check():
    """Verify root privileges when not in dry-run mode."""
    if os.geteuid() != 0 and not args.dryrun:
        bail("This script must be run as root")

def filter_comments(line: str) -> str:
    """Remove comments but preserve # characters in quoted strings."""

    if not line:
        return line
    
    result = []    
    in_quote = False
    quote_char = None
    i = 0
    
    while i < len(line):
        char = line[i]
        
        # Handle quotes
        if char in '"\'':
            if not in_quote:
                in_quote = True
                quote_char = char
            elif char == quote_char:
                in_quote = False
                quote_char = None
                
        # Handle comment outside of quotes
        elif char == '#' and not in_quote:
            break
            
        result.append(char)
        i += 1
    
    return ''.join(result).rstrip()

# ----------------------------------------------------------------------------
# Installed package database
# ----------------------------------------------------------------------------

def load_installed_packages() -> Set[str]:
    """Load the list of installed packages."""
    try:
        result = subprocess.run(['apt', 'list', '--installed'],
                             capture_output=True, text=True, check=True)
        return {p.split('/')[0] for p in result.stdout.splitlines()[1:] if '/' in p}
    except subprocess.CalledProcessError:
        bail("Error getting list of installed packages")

def is_package_installed(package: str) -> bool:
    """Check if a package is already installed."""
    return package in installed_packages

# ----------------------------------------------------------------------------
# Package Processing Functions
# ----------------------------------------------------------------------------
def parse_package_entry(name: str, lines: List[str]) -> PackageAttributes:
    """Parse a single package entry and return its attributes."""
    pkg = PackageAttributes(name=name)
    pkg.apt_package = name # Default apt package name
    
    for line in lines:
        try:
            directive_type, content = line.split(':', 1)
        except ValueError:
            bail(f"Error parsing directive: {line}")

        directive_type = directive_type.strip()
        content = content.strip()
        
        match directive_type:
            case 'flags':
                flags = {f.strip().lower() for f in content.split(',')}
                pkg.flags.update(flags)
            case 'deb':
                pkg.install_method = 'deb'
                pkg.url = content
            case 'repo':
                pkg.repositories.add(content)
            case 'source':
                filename, source_content = content.strip().split(None, 1)
                if not filename.startswith('/etc/apt/sources.list.d/'):
                    filename = f"/etc/apt/sources.list.d/{filename}"
                pkg.sources.append((filename, source_content))
            case _ if directive_type == 'script' or directive_type == 'prescript':
                pkg.pre_scripts.append(content)
            case _ if directive_type.startswith('post'):
                pkg.post_scripts.append(content)
            case 'apt':
                pkg.apt_package = content
            case _:
                bail(f"Unknown directive type: {directive_type}")
                
    return pkg
    
def parse_package_list(filename: Path) -> PackageList:
    """Parse package list file into PackageList structure."""
    packages = []
        
    with open(filename) as f:
        current_pkg = None
        current_directives = []
        continued_line = ''
        
        for line in f:
            line = line.rstrip()

            line = filter_comments(line)
            if not line:
                continue

            # Handle line continuation
            if line.endswith('\\'):
                continued_line += line[:-1] + '\n'
                continue
                
            if continued_line:
                line = continued_line + line
                continued_line = ''

            # Package name starts at beginning of line and is not followed by a colon (which indicates 
            # that the next line(s) are directives for this package)
            if not line.startswith(' '):
                # Process previous package if any
                if current_pkg:
                    pkg = parse_package_entry(current_pkg, current_directives)
                    packages.append(pkg)
                    

                # Start new package
                if ':' in line and not line.endswith(':'):
                    error(f"Package entry '{line}'")
                    error(f"  is not formatted correctly")
                    bail("Package names and directives cannot be on the same line")

                    
                current_pkg = line.strip().rstrip(':')
                current_directives = []
                continue

            # Collect directive
            if not current_pkg:
                bail("Found directive without a package name")
                
            line = line.strip()
            if line:  # Only add non-empty directives
                current_directives.append(line)
    
    # Process last package if any
    if current_pkg:
        pkg = parse_package_entry(current_pkg, current_directives)
        packages.append(pkg)

    return PackageList(packages=packages)

# ----------------------------------------------------------------------------
# Pretty printers
# ----------------------------------------------------------------------------

def format_package_list(packages: List[str], min_spacing: int = 2) -> str:
    """Format package list into columns for display."""
    if not packages:
        return ""

    try:
        terminal_width = os.get_terminal_size().columns
    except (AttributeError, OSError):
        terminal_width = 80

    pkg_names = sorted(packages)
    max_length = max(len(name) for name in pkg_names)
    column_width = max_length + min_spacing
    num_columns = max(1, terminal_width // column_width)

    num_rows = (len(pkg_names) + num_columns - 1) // num_columns

    output = []
    for row in range(num_rows):
        line = []
        for col in range(num_columns):
            idx = col * num_rows + row
            if idx < len(pkg_names):
                line.append(pkg_names[idx].ljust(column_width))
        output.append("  " + "".join(line).rstrip())

    return "\n".join(output)

def pretty_print_scripts(script: str):
    """Format script commands for display."""
    print("    " + script)

# ----------------------------------------------------------------------------
# Package Installation Functions
# ----------------------------------------------------------------------------

def run_scripts(scripts: List[Tuple[str, str]], phase: str = ""):
    """Run a list of (script, package) pairs."""

    commentary(f"Running {phase} scripts")
    if not scripts: 
        info(f"No {phase} scripts to run")
        return

    for script, package in scripts:
        if args.dryrun:
            info(f"Would run {phase} script for {package}:")
            if args.debug:
                pretty_print_scripts(script)
            continue
            
        info(f"Running {phase} script for {package}:")
        if args.debug:
            pretty_print_scripts(script)
        try:
            subprocess.run(script, **run_opts, shell=True, check=True)
            success(f"Completed {phase} script for {package}")
        except subprocess.CalledProcessError as result:
            error(f"Error running {phase} script:")
            pretty_print_scripts(script)
            error(f"Return code: {result.returncode}")
            bail(f"Script error for package {package}")

def download_packages(to_download: PackageList) -> PackageList:
    """Download packages from URLs.

    Returns a package list of all packages that have had files downloaded.
    """

    commentary("Downloading packages") 
    if not to_download:
        info("No packages to download")
        return PackageList(packages=[])
    
    downloaded_files = []

    for package in to_download:
        url = package.url

        filename = package.name
        filename += ".deb"
        
        if args.dryrun:
            info(f"Would download: {url} for package {package.name}")
            package.downloaded_file = filename
            downloaded_files.append(package)
            continue

        try:
            info(f"Downloading {url}")
            info(f"    to file {filename}")
            opener = urllib.request.build_opener(urllib.request.HTTPRedirectHandler())
            urllib.request.install_opener(opener)           
            urllib.request.urlretrieve(url, filename)
        
            if not os.path.isfile(filename):
                bail(f"Downloaded file {filename} not found")

            package.downloaded_file = filename
            downloaded_files.append(package)
            success(f"Downloaded {filename} successfully")

        except Exception as e:
            bail(f"Error downloading from URL {url}: {e}")

    return PackageList(packages=downloaded_files)

def add_repositories(repos: Set[str]) -> bool:
    """Add repositories. Returns True if updates needed."""

    commentary(f"Adding repositories")
    if not repos:
        info("No repositories to add")
        return False

    update_needed = False

    for repo in repos:
        if args.dryrun:
            info(f"Would add repository: {repo}")
            continue

        try:
            info(f"Adding repository: {repo}")
            subprocess.run(['add-apt-repository', '-y', repo], **run_opts, check=True)
            success(f"Added repository: {repo}")
            update_needed = True
        except subprocess.CalledProcessError:
            bail(f"Error adding repository: {repo}")

    return update_needed

def add_sources(sources: Dict[str, str]) -> bool:
    """Add sources to /apt/sources.list.d/... Returns True if update needed."""

    commentary(f"Adding package sources")
    if not sources:
        info(f"No sources to add")
        return False
    
    update_needed = False

    for filename, content in sources:
        if args.dryrun:
            info(f"Would add '{content}' to {filename}")
            continue

        try:
            update_needed = True # Assume an update is needed even if the file exists
            if not os.path.exists(filename):
                info(f"Adding source file: {filename}")
                with open(filename, 'w') as f:
                    f.write(f"{content}\n")
                success(f"Added package source in {filename}")
            else:
                warning(f"'{filename}' exists, skipping")
        except Exception as e:
            bail(f"Error adding source to {filename}: {e}")

    return update_needed

def install_apt_packages(packages: PackageList):
    """Install packages via apt."""

    commentary("Installing apt packages")
    if not packages:
        info("No packages to install")
        return 
    
    plst = []
    for package in packages:
        plst.append(package.apt_package)
    
    if args.dryrun:
        info(f"Would install apt packages:")
        notice(f"{format_package_list(plst)}")
        return
    
    try:
        subprocess.run(['apt', '-y', 'install', '--reinstall'] + plst, **run_opts, check=True)
        success("Package installation completed successfully")
    except subprocess.CalledProcessError:
        bail("Error installing packages")

def install_deb_packages(packages: PackageList):
    """Install downloaded .deb packages."""

    commentary(f"Installing .deb packages")
    if not packages:
        info(f"No deb packages to install")
        return

    plst: str = None
    for package in packages:
        if args.dryrun:
            info(f"Would install .deb file {package.downloaded_file} for package {package.name}")
            continue

        info(f"Installing .deb file {package.downloaded_file} for package {package.name}")
        try:
            subprocess.run(['dpkg', '-i', package.downloaded_file], **run_opts, check=True)
            success(f"Installed {package.downloaded_file} successfully")
        except subprocess.CalledProcessError:
            bail(f"Error installing {package.downloaded_file}")

def update_apt_database(run: bool):
    """Update apt package lists."""
    if not run:
        info("Package database update not required")
        return
            
    if args.dryrun:
        info("Would update package database")
        return

    info("Updating package database")
    try:
        subprocess.run(['apt', 'update'], **run_opts, check=True)
        success("Package database updated")
    except subprocess.CalledProcessError:
        bail("Error updating package database")

# ----------------------------------------------------------------------------
# Instal a PackageList 
# ----------------------------------------------------------------------------
def apply_cmdline_filters(pkg: PackageAttributes) -> bool:
    """ Apply command line --skip and --only flags.
    """
    if (args.skip and pkg.name in args.skip) or \
        (args.skip_flags and any(flag in args.skip_flags for flag in pkg.flags)):
        return True
        
    # Include package if:
    # - No filters specified, or
    if (not args.only and not args.only_flags):
        return False

    # - Package matches --only list, or
    if args.only and pkg.name in args.only:
       return False

    # - Package has flags matching --only-flags, or
    if args.only_flags and any(flag in args.only_flags for flag in pkg.flags):
        return False
    
    # Package doesn't match any of the filters
    return True

def install_package_list(pkg_list: PackageList):
    """Process all installation steps for the given packages."""
   
    if pkg_list.is_empty():
        info("No packages to install")
        return
    
    apt_update_needed = False

    # Collect all repositories, sources, scripts, etc. 
    all_repos = set()
    all_sources = []
    pre_scripts = []
    post_scripts = []
    urls = []
    apt_packages = []

    # skip reasons
    cmdline = []
    already_installed = []
    flag = []

    for pkg in pkg_list:

        if apply_cmdline_filters(pkg):
            cmdline.append(pkg.name)
            continue

        force = 'force' in pkg.flags or args.force_all

        if is_package_installed(pkg.name) and not force: 
            already_installed.append(pkg.name)
            continue

        if 'skip' in pkg.flags:
            flag.append(pkg.name)
            continue

        if 'force_apt_update' in pkg.flags:
            apt_update_needed = True

        all_repos.update(pkg.repositories)
        all_sources.extend(pkg.sources)
        pre_scripts.extend((script, pkg.name) for script in pkg.pre_scripts)
        post_scripts.extend((script, pkg.name) for script in pkg.post_scripts)
        if pkg.url and pkg.install_method == 'deb':
            urls.append(pkg)
        if pkg.install_method == 'apt' and 'no_apt' not in pkg.flags: 
            apt_packages.append(pkg)
    
    # Report on skipped packages, if any
    if cmdline:
        info(f"Skipping packages due to command line options:")
        print(f"{format_package_list(cmdline)}")
    if flag:
        info(f"Skipping packages due to flags:")
        print(f"{format_package_list(flag)}")
    if already_installed:
        info(f"Skipping already installed packages:")
        print(f"{format_package_list(already_installed)}")

    # Any packages left?
    if not any([all_repos, all_sources, pre_scripts, post_scripts, urls, apt_packages]):
        info("No packages to install")
        return
    
    # Add sources if needed
    apt_update_needed |= add_sources(all_sources)

    # Add repositories if needed
    apt_update_needed |= add_repositories(all_repos)
    
    # run pre-install scripts
    run_scripts(pre_scripts, "pre-install")

    update_apt_database(apt_update_needed)

    # Download and install .deb packages
    downloads = download_packages(urls)
    install_deb_packages(downloads)

    # Install apt packages
    install_apt_packages(apt_packages)

    # Collect and run post-install scripts
    run_scripts(post_scripts, "post-install")

def run_installation(packages: PackageList):
    """Install all packages in the given list."""

    # Break package list into the different package phases based on per package flags
    start_packages   = packages.get_packages_with_flags('start') 
    regular_packages = packages.get_packages_without_flags('start', 'end') 
    end_packages     = packages.get_packages_with_flags('end')

    # Start packages
    commentary(f"Installing start packages")
    install_package_list(start_packages)

    # Regular packages
    commentary(f"Installing regular packages")
    install_package_list(regular_packages)

    # End packages
    commentary(f"Installing end packages")
    install_package_list(end_packages)

# ----------------------------------------------------------------------------
# Main Program
# ----------------------------------------------------------------------------

def clean_args(alist: List[str]) -> List[str]:
    """Clean up a list of arguments."""
    if alist:
        items = []
        for a in alist:
            items.extend(a.split(','))
        alist = items

    return alist

def parse_arguments() -> argparse.Namespace:
    """Parse command line arguments."""
    global args

    parser = argparse.ArgumentParser(
        description='Install packages and manage package repository dependencies',
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-n', '--dryrun', action='store_true',
                      help='Dry run (do not actually install packages)')
    parser.add_argument('-p', '--preserve', action='store_true',
                      help='Preserve the temporary working directory')
    parser.add_argument('-v', '--version', action='version',
                      version=f'%(prog)s version {VERSION}')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='Squelch subprocess output')
    parser.add_argument('--debug', action='store_true', 
                        help='Print any script source before execution')

    parser.add_argument('filename', help='Package list file')
    
    # Only install these packages.  Can be specified more than once
    parser.add_argument('--skip', nargs=1, 
                      help=f'Do not run package these pacakages (comma separated)')
    parser.add_argument('--skip-flags', nargs=1,
                      help=f'Do not run packages with these flags (comma separated)')
    parser.add_argument('--only-flags', nargs=1,
                        help='Only install packages with these flags (comma separated)')
    parser.add_argument('--only', nargs=1,
                        help='Only install these packages (comma separated)')
    
    # Force install all installed packages
    parser.add_argument('--force-all', action='store_true',
                        help='Force install all the packages')
    
    args = parser.parse_args()

    # Clean up arguments
    args.skip = clean_args(args.skip)
    args.skip_flags = clean_args(args.skip_flags)
    args.only_flags = clean_args(args.only_flags)
    args.only = clean_args(args.only)

    # Set up subprocess runargs based on quiet option
    global run_opts
    run_opts = {}
    if args.quiet:
        run_opts = {
            'stdout': subprocess.DEVNULL,
            'stderr': subprocess.DEVNULL
        }

    # Validate input file
    args.filename = Path(args.filename).resolve()
    if not args.filename.is_file():
        bail(f"Package file '{args.filename}' does not exist or is not readable.")

    return args

def main():
    global installed_packages, temp_dir, preserve_working_dir

    args = parse_arguments()

    installed_packages = load_installed_packages()
    package_entries = parse_package_list(args.filename)
    if package_entries.is_empty():
        commentary(f"No packages to install")
        return
  
    # Set up environment
    make_working_directory()
    if not args.dryrun:
        root_check()

    # Start installation process
    commentary("Starting package installation")
    run_installation(package_entries)
    commentary("Installation complete")

if __name__ == '__main__':
    main()
    '''
    try:
        main()
    except KeyboardInterrupt:
        bail("\nInstallation interrupted by user")
    except Exception as e:
        if '--debug' in sys.argv:
            raise
        bail(f"Unexpected error: {e}")
    '''
